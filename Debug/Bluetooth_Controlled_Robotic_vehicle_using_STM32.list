
Bluetooth_Controlled_Robotic_vehicle_using_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003908  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003ae0  08003ae0  00004ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b38  08003b38  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003b54  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003b54  00005154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd42  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7c  00000000  00000000  00011d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00013b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a6  00000000  00000000  000144f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c22a  00000000  00000000  00014c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bffb  00000000  00000000  00030ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2d0c  00000000  00000000  0003cebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efbc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d0  00000000  00000000  000efc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f23dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003ac8 	.word	0x08003ac8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003ac8 	.word	0x08003ac8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fbca 	bl	8000ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f90b 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f9eb 	bl	80008f0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800051a:	f000 f953 	bl	80007c4 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800051e:	f000 f99b 	bl	8000858 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  uint8_t uart_rx_data=0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]
   /* USER CODE BEGIN WHILE */
   while (1)
               {

                   // Check UART
 	              HAL_UART_Transmit(&huart3, (uint8_t*)"AT\r\n", 4, HAL_MAX_DELAY);
 8000526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800052a:	2204      	movs	r2, #4
 800052c:	4979      	ldr	r1, [pc, #484]	@ (8000714 <main+0x20c>)
 800052e:	487a      	ldr	r0, [pc, #488]	@ (8000718 <main+0x210>)
 8000530:	f001 ffb6 	bl	80024a0 <HAL_UART_Transmit>
                   if (HAL_UART_Receive(&huart3, &uart_rx_data, 1, 100) == HAL_OK)
 8000534:	1df9      	adds	r1, r7, #7
 8000536:	2364      	movs	r3, #100	@ 0x64
 8000538:	2201      	movs	r2, #1
 800053a:	4877      	ldr	r0, [pc, #476]	@ (8000718 <main+0x210>)
 800053c:	f002 f83e 	bl	80025bc <HAL_UART_Receive>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1ef      	bne.n	8000526 <main+0x1e>
                   {
                       if (uart_rx_data == '1')
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b31      	cmp	r3, #49	@ 0x31
 800054a:	d12a      	bne.n	80005a2 <main+0x9a>
                       {
                           // Motor forward
                     	  HAL_UART_Transmit(&huart3, (uint8_t*)"AT1\r\n", 4, HAL_MAX_DELAY);//check uart
 800054c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000550:	2204      	movs	r2, #4
 8000552:	4972      	ldr	r1, [pc, #456]	@ (800071c <main+0x214>)
 8000554:	4870      	ldr	r0, [pc, #448]	@ (8000718 <main+0x210>)
 8000556:	f001 ffa3 	bl	80024a0 <HAL_UART_Transmit>
                     	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);//en
 800055a:	2201      	movs	r2, #1
 800055c:	2120      	movs	r1, #32
 800055e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000562:	f000 ff63 	bl	800142c <HAL_GPIO_WritePin>
                     	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);//en
 8000566:	2201      	movs	r2, #1
 8000568:	2140      	movs	r1, #64	@ 0x40
 800056a:	486d      	ldr	r0, [pc, #436]	@ (8000720 <main+0x218>)
 800056c:	f000 ff5e 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // in3
 8000570:	2200      	movs	r2, #0
 8000572:	2180      	movs	r1, #128	@ 0x80
 8000574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000578:	f000 ff58 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // in4
 800057c:	2201      	movs	r2, #1
 800057e:	2140      	movs	r1, #64	@ 0x40
 8000580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000584:	f000 ff52 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // in2
 8000588:	2200      	movs	r2, #0
 800058a:	2180      	movs	r1, #128	@ 0x80
 800058c:	4865      	ldr	r0, [pc, #404]	@ (8000724 <main+0x21c>)
 800058e:	f000 ff4d 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // in1
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f000 ff46 	bl	800142c <HAL_GPIO_WritePin>
 80005a0:	e7c1      	b.n	8000526 <main+0x1e>


                       }
                       else if (uart_rx_data == '3')
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b33      	cmp	r3, #51	@ 0x33
 80005a6:	d12a      	bne.n	80005fe <main+0xf6>
                       {
                           // Motor backward
                     	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);//en
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f000 ff3c 	bl	800142c <HAL_GPIO_WritePin>
                     	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);//en
 80005b4:	2201      	movs	r2, #1
 80005b6:	2140      	movs	r1, #64	@ 0x40
 80005b8:	4859      	ldr	r0, [pc, #356]	@ (8000720 <main+0x218>)
 80005ba:	f000 ff37 	bl	800142c <HAL_GPIO_WritePin>
                     	  HAL_UART_Transmit(&huart3, (uint8_t*)"AT2\r\n", 4, HAL_MAX_DELAY);//check uart
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c2:	2204      	movs	r2, #4
 80005c4:	4958      	ldr	r1, [pc, #352]	@ (8000728 <main+0x220>)
 80005c6:	4854      	ldr	r0, [pc, #336]	@ (8000718 <main+0x210>)
 80005c8:	f001 ff6a 	bl	80024a0 <HAL_UART_Transmit>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //in4
 80005cc:	2200      	movs	r2, #0
 80005ce:	2140      	movs	r1, #64	@ 0x40
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f000 ff2a 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // in3
 80005d8:	2201      	movs	r2, #1
 80005da:	2180      	movs	r1, #128	@ 0x80
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e0:	f000 ff24 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); // in2
 80005e4:	2201      	movs	r2, #1
 80005e6:	2180      	movs	r1, #128	@ 0x80
 80005e8:	484e      	ldr	r0, [pc, #312]	@ (8000724 <main+0x21c>)
 80005ea:	f000 ff1f 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);   // in1
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f000 ff18 	bl	800142c <HAL_GPIO_WritePin>
 80005fc:	e793      	b.n	8000526 <main+0x1e>

                       }
                       else if (uart_rx_data == '5')
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b35      	cmp	r3, #53	@ 0x35
 8000602:	d12a      	bne.n	800065a <main+0x152>
                       {
                           // Motor stop
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2120      	movs	r1, #32
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f000 ff0e 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2140      	movs	r1, #64	@ 0x40
 8000614:	4842      	ldr	r0, [pc, #264]	@ (8000720 <main+0x218>)
 8000616:	f000 ff09 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_UART_Transmit(&huart3, (uint8_t*)"AT2\r\n", 4, HAL_MAX_DELAY);//check uart
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800061e:	2204      	movs	r2, #4
 8000620:	4941      	ldr	r1, [pc, #260]	@ (8000728 <main+0x220>)
 8000622:	483d      	ldr	r0, [pc, #244]	@ (8000718 <main+0x210>)
 8000624:	f001 ff3c 	bl	80024a0 <HAL_UART_Transmit>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // GPIO_PIN_5 for backward
 8000628:	2200      	movs	r2, #0
 800062a:	2140      	movs	r1, #64	@ 0x40
 800062c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000630:	f000 fefc 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // GPIO_PIN_7 for backward
 8000634:	2200      	movs	r2, #0
 8000636:	2180      	movs	r1, #128	@ 0x80
 8000638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063c:	f000 fef6 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // GPIO_PIN_7 for forward
 8000640:	2200      	movs	r2, #0
 8000642:	2180      	movs	r1, #128	@ 0x80
 8000644:	4837      	ldr	r0, [pc, #220]	@ (8000724 <main+0x21c>)
 8000646:	f000 fef1 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);   // GPIO_PIN_5 for forward
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000654:	f000 feea 	bl	800142c <HAL_GPIO_WritePin>
 8000658:	e765      	b.n	8000526 <main+0x1e>

                        }
                       else if (uart_rx_data == '2')
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b32      	cmp	r3, #50	@ 0x32
 800065e:	d12a      	bne.n	80006b6 <main+0x1ae>
                        {
                           // Motor left
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2120      	movs	r1, #32
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f000 fee0 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2140      	movs	r1, #64	@ 0x40
 8000670:	482b      	ldr	r0, [pc, #172]	@ (8000720 <main+0x218>)
 8000672:	f000 fedb 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_UART_Transmit(&huart3, (uint8_t*)"AT2\r\n", 4, HAL_MAX_DELAY);//check uart
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800067a:	2204      	movs	r2, #4
 800067c:	492a      	ldr	r1, [pc, #168]	@ (8000728 <main+0x220>)
 800067e:	4826      	ldr	r0, [pc, #152]	@ (8000718 <main+0x210>)
 8000680:	f001 ff0e 	bl	80024a0 <HAL_UART_Transmit>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // in4
 8000684:	2200      	movs	r2, #0
 8000686:	2140      	movs	r1, #64	@ 0x40
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f000 fece 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // in3
 8000690:	2200      	movs	r2, #0
 8000692:	2180      	movs	r1, #128	@ 0x80
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f000 fec8 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // in2
 800069c:	2200      	movs	r2, #0
 800069e:	2180      	movs	r1, #128	@ 0x80
 80006a0:	4820      	ldr	r0, [pc, #128]	@ (8000724 <main+0x21c>)
 80006a2:	f000 fec3 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // in1
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f000 febc 	bl	800142c <HAL_GPIO_WritePin>
 80006b4:	e737      	b.n	8000526 <main+0x1e>
                                                                  }

                       else if (uart_rx_data == '4')
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b34      	cmp	r3, #52	@ 0x34
 80006ba:	f47f af34 	bne.w	8000526 <main+0x1e>
                       {
                           // Motor right
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2120      	movs	r1, #32
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c6:	f000 feb1 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2140      	movs	r1, #64	@ 0x40
 80006ce:	4814      	ldr	r0, [pc, #80]	@ (8000720 <main+0x218>)
 80006d0:	f000 feac 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_UART_Transmit(&huart3, (uint8_t*)"AT2\r\n", 4, HAL_MAX_DELAY);//check uart
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d8:	2204      	movs	r2, #4
 80006da:	4913      	ldr	r1, [pc, #76]	@ (8000728 <main+0x220>)
 80006dc:	480e      	ldr	r0, [pc, #56]	@ (8000718 <main+0x210>)
 80006de:	f001 fedf 	bl	80024a0 <HAL_UART_Transmit>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // in4
 80006e2:	2201      	movs	r2, #1
 80006e4:	2140      	movs	r1, #64	@ 0x40
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f000 fe9f 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // in3
 80006ee:	2200      	movs	r2, #0
 80006f0:	2180      	movs	r1, #128	@ 0x80
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f6:	f000 fe99 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // in2
 80006fa:	2200      	movs	r2, #0
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	4809      	ldr	r0, [pc, #36]	@ (8000724 <main+0x21c>)
 8000700:	f000 fe94 	bl	800142c <HAL_GPIO_WritePin>
                           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);   // in1
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800070a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070e:	f000 fe8d 	bl	800142c <HAL_GPIO_WritePin>
 	              HAL_UART_Transmit(&huart3, (uint8_t*)"AT\r\n", 4, HAL_MAX_DELAY);
 8000712:	e708      	b.n	8000526 <main+0x1e>
 8000714:	08003ae0 	.word	0x08003ae0
 8000718:	200000bc 	.word	0x200000bc
 800071c:	08003ae8 	.word	0x08003ae8
 8000720:	48000400 	.word	0x48000400
 8000724:	48000800 	.word	0x48000800
 8000728:	08003af0 	.word	0x08003af0

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0318 	add.w	r3, r7, #24
 8000736:	2238      	movs	r2, #56	@ 0x38
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f003 f998 	bl	8003a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800074e:	2000      	movs	r0, #0
 8000750:	f000 fe84 	bl	800145c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	2340      	movs	r3, #64	@ 0x40
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800076a:	2304      	movs	r3, #4
 800076c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800076e:	2355      	movs	r3, #85	@ 0x55
 8000770:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	4618      	mov	r0, r3
 8000784:	f000 ff1e 	bl	80015c4 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800078e:	f000 f94b 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fa1c 	bl	8001be8 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007b6:	f000 f937 	bl	8000a28 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	@ 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007c8:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007ca:	4a22      	ldr	r2, [pc, #136]	@ (8000854 <MX_LPUART1_UART_Init+0x90>)
 80007cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000806:	4812      	ldr	r0, [pc, #72]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 8000808:	f001 fdfa 	bl	8002400 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f909 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	480d      	ldr	r0, [pc, #52]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 800081a:	f003 f85e 	bl	80038da <HAL_UARTEx_SetTxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000824:	f000 f900 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4809      	ldr	r0, [pc, #36]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 800082c:	f003 f893 	bl	8003956 <HAL_UARTEx_SetRxFifoThreshold>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000836:	f000 f8f7 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_LPUART1_UART_Init+0x8c>)
 800083c:	f003 f814 	bl	8003868 <HAL_UARTEx_DisableFifoMode>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000846:	f000 f8ef 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000028 	.word	0x20000028
 8000854:	40008000 	.word	0x40008000

08000858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800085e:	4a23      	ldr	r2, [pc, #140]	@ (80008ec <MX_USART3_UART_Init+0x94>)
 8000860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a0:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 80008a2:	f001 fdad 	bl	8002400 <HAL_UART_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 f8bc 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 80008b4:	f003 f811 	bl	80038da <HAL_UARTEx_SetTxFifoThreshold>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f8b3 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 80008c6:	f003 f846 	bl	8003956 <HAL_UARTEx_SetRxFifoThreshold>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008d0:	f000 f8aa 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_USART3_UART_Init+0x90>)
 80008d6:	f002 ffc7 	bl	8003868 <HAL_UARTEx_DisableFifoMode>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f8a2 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000bc 	.word	0x200000bc
 80008ec:	40004800 	.word	0x40004800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a44      	ldr	r2, [pc, #272]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b42      	ldr	r3, [pc, #264]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a3e      	ldr	r2, [pc, #248]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 8000924:	f043 0320 	orr.w	r3, r3, #32
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b39      	ldr	r3, [pc, #228]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a38      	ldr	r2, [pc, #224]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b36      	ldr	r3, [pc, #216]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b33      	ldr	r3, [pc, #204]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a32      	ldr	r2, [pc, #200]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b30      	ldr	r3, [pc, #192]	@ (8000a1c <MX_GPIO_Init+0x12c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f000 fd5c 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	21a0      	movs	r1, #160	@ 0xa0
 8000978:	4829      	ldr	r0, [pc, #164]	@ (8000a20 <MX_GPIO_Init+0x130>)
 800097a:	f000 fd57 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2140      	movs	r1, #64	@ 0x40
 8000982:	4828      	ldr	r0, [pc, #160]	@ (8000a24 <MX_GPIO_Init+0x134>)
 8000984:	f000 fd52 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4820      	ldr	r0, [pc, #128]	@ (8000a20 <MX_GPIO_Init+0x130>)
 80009a0:	f000 fbc2 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a4:	2301      	movs	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <MX_GPIO_Init+0x130>)
 80009b8:	f000 fbb6 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80009bc:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d8:	f000 fba6 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009dc:	23a0      	movs	r3, #160	@ 0xa0
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <MX_GPIO_Init+0x130>)
 80009f4:	f000 fb98 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009f8:	2340      	movs	r3, #64	@ 0x40
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_GPIO_Init+0x134>)
 8000a10:	f000 fb8a 	bl	8001128 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	@ 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000800 	.word	0x48000800
 8000a24:	48000400 	.word	0x48000400

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a6a:	f000 fd9b 	bl	80015a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09c      	sub	sp, #112	@ 0x70
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	2244      	movs	r2, #68	@ 0x44
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 ffe7 	bl	8003a70 <memset>
  if(huart->Instance==LPUART1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a41      	ldr	r2, [pc, #260]	@ (8000bac <HAL_UART_MspInit+0x130>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d137      	bne.n	8000b1c <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000aac:	2320      	movs	r3, #32
 8000aae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fab1 	bl	8002020 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac4:	f7ff ffb0 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ac8:	4b39      	ldr	r3, [pc, #228]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000acc:	4a38      	ldr	r2, [pc, #224]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ad4:	4b36      	ldr	r3, [pc, #216]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b33      	ldr	r3, [pc, #204]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae4:	4a32      	ldr	r2, [pc, #200]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aec:	4b30      	ldr	r3, [pc, #192]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000af8:	230c      	movs	r3, #12
 8000afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b16:	f000 fb07 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b1a:	e043      	b.n	8000ba4 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a24      	ldr	r2, [pc, #144]	@ (8000bb4 <HAL_UART_MspInit+0x138>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d13e      	bne.n	8000ba4 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b26:	2304      	movs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fa74 	bl	8002020 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000b3e:	f7ff ff73 	bl	8000a28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b42:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b46:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a14      	ldr	r2, [pc, #80]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_UART_MspInit+0x134>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b72:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b84:	2307      	movs	r3, #7
 8000b86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480a      	ldr	r0, [pc, #40]	@ (8000bb8 <HAL_UART_MspInit+0x13c>)
 8000b90:	f000 faca 	bl	8001128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	2027      	movs	r0, #39	@ 0x27
 8000b9a:	f000 f9d0 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b9e:	2027      	movs	r0, #39	@ 0x27
 8000ba0:	f000 f9e7 	bl	8000f72 <HAL_NVIC_EnableIRQ>
}
 8000ba4:	bf00      	nop
 8000ba6:	3770      	adds	r7, #112	@ 0x70
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40008000 	.word	0x40008000
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40004800 	.word	0x40004800
 8000bb8:	48000400 	.word	0x48000400

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c12:	f000 f89b 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <USART3_IRQHandler+0x10>)
 8000c22:	f001 fd93 	bl	800274c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000bc 	.word	0x200000bc

08000c30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff ffea 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f002 fefd 	bl	8003a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fc3f 	bl	8000508 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   r0, =_estack
 8000c8c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c98:	08003b48 	.word	0x08003b48
  ldr r2, =_sbss
 8000c9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca0:	20000154 	.word	0x20000154

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>

08000ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f939 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f80e 	bl	8000cd8 <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc8:	f7ff feb4 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <HAL_InitTick+0x68>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d022      	beq.n	8000d32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_InitTick+0x6c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <HAL_InitTick+0x68>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f944 	bl	8000f8e <HAL_SYSTICK_Config>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10f      	bne.n	8000d2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d809      	bhi.n	8000d26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	2200      	movs	r2, #0
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d1a:	f000 f910 	bl	8000f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_InitTick+0x70>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e007      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e004      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e001      	b.n	8000d36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a03      	ldr	r2, [pc, #12]	@ (8000d68 <HAL_IncTick+0x1c>)
 8000d5c:	6013      	str	r3, [r2, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20000150 	.word	0x20000150
 8000d6c:	20000008 	.word	0x20000008

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000150 	.word	0x20000150

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	@ (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	@ (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	@ (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	@ 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff29 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff40 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff90 	bl	8000e7c <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5f 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff33 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffa4 	bl	8000ee4 <SysTick_Config>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d005      	beq.n	8000fca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e037      	b.n	800103a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 020e 	bic.w	r2, r2, #14
 8000fd8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fe8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0201 	bic.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f003 021f 	and.w	r2, r3, #31
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	2101      	movs	r1, #1
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001016:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00c      	beq.n	800103a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800102e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001038:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d00d      	beq.n	800108c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2204      	movs	r2, #4
 8001074:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e047      	b.n	800111c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 020e 	bic.w	r2, r2, #14
 800109a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00c      	beq.n	80010fc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	4798      	blx	r3
    }
  }
  return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001136:	e15a      	b.n	80013ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 814c 	beq.w	80013e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d005      	beq.n	8001168 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001164:	2b02      	cmp	r3, #2
 8001166:	d130      	bne.n	80011ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119e:	2201      	movs	r2, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	f003 0201 	and.w	r2, r3, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d017      	beq.n	8001206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d123      	bne.n	800125a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	6939      	ldr	r1, [r7, #16]
 8001256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0203 	and.w	r2, r3, #3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80a6 	beq.w	80013e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129c:	4b5b      	ldr	r3, [pc, #364]	@ (800140c <HAL_GPIO_Init+0x2e4>)
 800129e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a0:	4a5a      	ldr	r2, [pc, #360]	@ (800140c <HAL_GPIO_Init+0x2e4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a8:	4b58      	ldr	r3, [pc, #352]	@ (800140c <HAL_GPIO_Init+0x2e4>)
 80012aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b4:	4a56      	ldr	r2, [pc, #344]	@ (8001410 <HAL_GPIO_Init+0x2e8>)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012de:	d01f      	beq.n	8001320 <HAL_GPIO_Init+0x1f8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001414 <HAL_GPIO_Init+0x2ec>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d019      	beq.n	800131c <HAL_GPIO_Init+0x1f4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4b      	ldr	r2, [pc, #300]	@ (8001418 <HAL_GPIO_Init+0x2f0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1f0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4a      	ldr	r2, [pc, #296]	@ (800141c <HAL_GPIO_Init+0x2f4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1ec>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a49      	ldr	r2, [pc, #292]	@ (8001420 <HAL_GPIO_Init+0x2f8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a48      	ldr	r2, [pc, #288]	@ (8001424 <HAL_GPIO_Init+0x2fc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1e4>
 8001308:	2305      	movs	r3, #5
 800130a:	e00a      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 800130c:	2306      	movs	r3, #6
 800130e:	e008      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001310:	2304      	movs	r3, #4
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001314:	2303      	movs	r3, #3
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001320:	2300      	movs	r3, #0
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001332:	4937      	ldr	r1, [pc, #220]	@ (8001410 <HAL_GPIO_Init+0x2e8>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001340:	4b39      	ldr	r3, [pc, #228]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001364:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800136a:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <HAL_GPIO_Init+0x300>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138e:	4a26      	ldr	r2, [pc, #152]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <HAL_GPIO_Init+0x300>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <HAL_GPIO_Init+0x300>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e2:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <HAL_GPIO_Init+0x300>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f ae9d 	bne.w	8001138 <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001000 	.word	0x48001000
 8001424:	48001400 	.word	0x48001400
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001448:	e002      	b.n	8001450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d141      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800146a:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001476:	d131      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001478:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800147e:	4a46      	ldr	r2, [pc, #280]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001484:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001488:	4b43      	ldr	r3, [pc, #268]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001490:	4a41      	ldr	r2, [pc, #260]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001496:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001498:	4b40      	ldr	r3, [pc, #256]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2232      	movs	r2, #50	@ 0x32
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	4a3f      	ldr	r2, [pc, #252]	@ (80015a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9b      	lsrs	r3, r3, #18
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ae:	e002      	b.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b6:	4b38      	ldr	r3, [pc, #224]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c2:	d102      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f2      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ca:	4b33      	ldr	r3, [pc, #204]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d6:	d158      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e057      	b.n	800158c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014ec:	e04d      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014f4:	d141      	bne.n	800157a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f6:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001502:	d131      	bne.n	8001568 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800150a:	4a23      	ldr	r2, [pc, #140]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800151c:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001522:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2232      	movs	r2, #50	@ 0x32
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	0c9b      	lsrs	r3, r3, #18
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153a:	e002      	b.n	8001542 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3b01      	subs	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154e:	d102      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f2      	bne.n	800153c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001562:	d112      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e011      	b.n	800158c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001574:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001578:	e007      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001584:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001588:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40007000 	.word	0x40007000
 800159c:	20000000 	.word	0x20000000
 80015a0:	431bde83 	.word	0x431bde83

080015a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b2:	6093      	str	r3, [r2, #8]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40007000 	.word	0x40007000

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e2fe      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d075      	beq.n	80016ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e2:	4b97      	ldr	r3, [pc, #604]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ec:	4b94      	ldr	r3, [pc, #592]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	d102      	bne.n	8001602 <HAL_RCC_OscConfig+0x3e>
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d002      	beq.n	8001608 <HAL_RCC_OscConfig+0x44>
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b08      	cmp	r3, #8
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b8d      	ldr	r3, [pc, #564]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d05b      	beq.n	80016cc <HAL_RCC_OscConfig+0x108>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d157      	bne.n	80016cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e2d9      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x74>
 800162a:	4b85      	ldr	r3, [pc, #532]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a84      	ldr	r2, [pc, #528]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x98>
 8001642:	4b7f      	ldr	r3, [pc, #508]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7e      	ldr	r2, [pc, #504]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b7c      	ldr	r3, [pc, #496]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7b      	ldr	r2, [pc, #492]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 800165c:	4b78      	ldr	r3, [pc, #480]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a77      	ldr	r2, [pc, #476]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b75      	ldr	r3, [pc, #468]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a74      	ldr	r2, [pc, #464]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb78 	bl	8000d70 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fb74 	bl	8000d70 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e29e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001696:	4b6a      	ldr	r3, [pc, #424]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0xc0>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fb64 	bl	8000d70 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb60 	bl	8000d70 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e28a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016be:	4b60      	ldr	r3, [pc, #384]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0xe8>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d075      	beq.n	80017c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4b59      	ldr	r3, [pc, #356]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e4:	4b56      	ldr	r3, [pc, #344]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b0c      	cmp	r3, #12
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x136>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d002      	beq.n	8001700 <HAL_RCC_OscConfig+0x13c>
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d11f      	bne.n	8001740 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001700:	4b4f      	ldr	r3, [pc, #316]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_OscConfig+0x154>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e25d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b49      	ldr	r3, [pc, #292]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	061b      	lsls	r3, r3, #24
 8001726:	4946      	ldr	r1, [pc, #280]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800172c:	4b45      	ldr	r3, [pc, #276]	@ (8001844 <HAL_RCC_OscConfig+0x280>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fad1 	bl	8000cd8 <HAL_InitTick>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d043      	beq.n	80017c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e249      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d023      	beq.n	8001790 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a3c      	ldr	r2, [pc, #240]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fb0c 	bl	8000d70 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fb08 	bl	8000d70 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e232      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	061b      	lsls	r3, r3, #24
 8001788:	492d      	ldr	r1, [pc, #180]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
 800178e:	e01a      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001790:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2a      	ldr	r2, [pc, #168]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001796:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800179a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fae8 	bl	8000d70 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff fae4 	bl	8000d70 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e20e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x1e0>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d041      	beq.n	8001856 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01c      	beq.n	8001814 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e0:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fac1 	bl	8000d70 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f2:	f7ff fabd 	bl	8000d70 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1e7      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0ef      	beq.n	80017f2 <HAL_RCC_OscConfig+0x22e>
 8001812:	e020      	b.n	8001856 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	4a09      	ldr	r2, [pc, #36]	@ (8001840 <HAL_RCC_OscConfig+0x27c>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff faa4 	bl	8000d70 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800182a:	e00d      	b.n	8001848 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff faa0 	bl	8000d70 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d906      	bls.n	8001848 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1ca      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001848:	4b8c      	ldr	r3, [pc, #560]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ea      	bne.n	800182c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80a6 	beq.w	80019b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001868:	4b84      	ldr	r3, [pc, #528]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_OscConfig+0x2b4>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x2b6>
 8001878:	2300      	movs	r3, #0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	4a7e      	ldr	r2, [pc, #504]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	6593      	str	r3, [r2, #88]	@ 0x58
 800188a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001896:	2301      	movs	r3, #1
 8001898:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189a:	4b79      	ldr	r3, [pc, #484]	@ (8001a80 <HAL_RCC_OscConfig+0x4bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d118      	bne.n	80018d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a6:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <HAL_RCC_OscConfig+0x4bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a75      	ldr	r2, [pc, #468]	@ (8001a80 <HAL_RCC_OscConfig+0x4bc>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fa5d 	bl	8000d70 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ba:	f7ff fa59 	bl	8000d70 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e183      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <HAL_RCC_OscConfig+0x4bc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d108      	bne.n	80018f2 <HAL_RCC_OscConfig+0x32e>
 80018e0:	4b66      	ldr	r3, [pc, #408]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e6:	4a65      	ldr	r2, [pc, #404]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f0:	e024      	b.n	800193c <HAL_RCC_OscConfig+0x378>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d110      	bne.n	800191c <HAL_RCC_OscConfig+0x358>
 80018fa:	4b60      	ldr	r3, [pc, #384]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001900:	4a5e      	ldr	r2, [pc, #376]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800190a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001910:	4a5a      	ldr	r2, [pc, #360]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800191a:	e00f      	b.n	800193c <HAL_RCC_OscConfig+0x378>
 800191c:	4b57      	ldr	r3, [pc, #348]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001922:	4a56      	ldr	r2, [pc, #344]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800192c:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001932:	4a52      	ldr	r2, [pc, #328]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d016      	beq.n	8001972 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fa14 	bl	8000d70 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff fa10 	bl	8000d70 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e138      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001962:	4b46      	ldr	r3, [pc, #280]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ed      	beq.n	800194c <HAL_RCC_OscConfig+0x388>
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff f9fd 	bl	8000d70 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff f9f9 	bl	8000d70 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e121      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001990:	4b3a      	ldr	r3, [pc, #232]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ed      	bne.n	800197a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800199e:	7ffb      	ldrb	r3, [r7, #31]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a4:	4b35      	ldr	r3, [pc, #212]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	4a34      	ldr	r2, [pc, #208]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0320 	and.w	r3, r3, #32
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d03c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01c      	beq.n	80019fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019c4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ca:	4a2c      	ldr	r2, [pc, #176]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff f9cc 	bl	8000d70 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019dc:	f7ff f9c8 	bl	8000d70 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0f2      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 80019f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ef      	beq.n	80019dc <HAL_RCC_OscConfig+0x418>
 80019fc:	e01b      	b.n	8001a36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a04:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff f9af 	bl	8000d70 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a16:	f7ff f9ab 	bl	8000d70 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0d5      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ef      	bne.n	8001a16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80c9 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a40:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	f000 8083 	beq.w	8001b54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d15e      	bne.n	8001b14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_RCC_OscConfig+0x4b8>)
 8001a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f985 	bl	8000d70 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	e00c      	b.n	8001a84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff f981 	bl	8000d70 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d905      	bls.n	8001a84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0ab      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a84:	4b55      	ldr	r3, [pc, #340]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ec      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	4b52      	ldr	r3, [pc, #328]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	4b52      	ldr	r3, [pc, #328]	@ (8001be0 <HAL_RCC_OscConfig+0x61c>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6a11      	ldr	r1, [r2, #32]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001aaa:	0212      	lsls	r2, r2, #8
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ab2:	0852      	lsrs	r2, r2, #1
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	0552      	lsls	r2, r2, #21
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001abe:	0852      	lsrs	r2, r2, #1
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	0652      	lsls	r2, r2, #25
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001aca:	06d2      	lsls	r2, r2, #27
 8001acc:	430a      	orrs	r2, r1
 8001ace:	4943      	ldr	r1, [pc, #268]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad4:	4b41      	ldr	r3, [pc, #260]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a40      	ldr	r2, [pc, #256]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f940 	bl	8000d70 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f93c 	bl	8000d70 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e066      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	4b35      	ldr	r3, [pc, #212]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x530>
 8001b12:	e05e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a30      	ldr	r2, [pc, #192]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f926 	bl	8000d70 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f922 	bl	8000d70 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e04c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3a:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b46:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4924      	ldr	r1, [pc, #144]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60cb      	str	r3, [r1, #12]
 8001b52:	e03e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e039      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b60:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <HAL_RCC_OscConfig+0x618>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d12c      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d123      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d11b      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d113      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d109      	bne.n	8001bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	019f800c 	.word	0x019f800c
 8001be4:	feeefffc 	.word	0xfeeefffc

08001be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e11e      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b91      	ldr	r3, [pc, #580]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b8e      	ldr	r3, [pc, #568]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 020f 	bic.w	r2, r3, #15
 8001c16:	498c      	ldr	r1, [pc, #560]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b8a      	ldr	r3, [pc, #552]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e106      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d073      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d129      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c44:	4b81      	ldr	r3, [pc, #516]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0f4      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c54:	f000 f99e 	bl	8001f94 <RCC_GetSysClockFreqFromPLLSource>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4a7c      	ldr	r2, [pc, #496]	@ (8001e50 <HAL_RCC_ClockConfig+0x268>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d93f      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c62:	4b7a      	ldr	r3, [pc, #488]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d033      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d12f      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c82:	4b72      	ldr	r3, [pc, #456]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c8a:	4a70      	ldr	r2, [pc, #448]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e024      	b.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d109      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0c6      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	4b66      	ldr	r3, [pc, #408]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0be      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cc0:	f000 f8ce 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4a61      	ldr	r2, [pc, #388]	@ (8001e50 <HAL_RCC_ClockConfig+0x268>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d909      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cce:	4b5f      	ldr	r3, [pc, #380]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f023 0203 	bic.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4957      	ldr	r1, [pc, #348]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf4:	f7ff f83c 	bl	8000d70 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff f838 	bl	8000d70 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e095      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	4b4e      	ldr	r3, [pc, #312]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 020c 	and.w	r2, r3, #12
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1eb      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d3c:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a42      	ldr	r2, [pc, #264]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d54:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d5c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4936      	ldr	r1, [pc, #216]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b80      	cmp	r3, #128	@ 0x80
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d7e:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4a32      	ldr	r2, [pc, #200]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001d84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d21d      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d98:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 020f 	bic.w	r2, r3, #15
 8001da0:	4929      	ldr	r1, [pc, #164]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001da8:	f7fe ffe2 	bl	8000d70 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe ffde 	bl	8000d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e03b      	b.n	8001e3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d1ed      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4917      	ldr	r1, [pc, #92]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	490f      	ldr	r1, [pc, #60]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e12:	f000 f825 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	490c      	ldr	r1, [pc, #48]	@ (8001e54 <HAL_RCC_ClockConfig+0x26c>)
 8001e24:	5ccb      	ldrb	r3, [r1, r3]
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_RCC_ClockConfig+0x270>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_ClockConfig+0x274>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe ff4e 	bl	8000cd8 <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	04c4b400 	.word	0x04c4b400
 8001e54:	08003af8 	.word	0x08003af8
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e66:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e72:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e047      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d102      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e84:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	e03e      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e8a:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d136      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e96:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d10c      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebe:	68d2      	ldr	r2, [r2, #12]
 8001ec0:	0a12      	lsrs	r2, r2, #8
 8001ec2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
      break;
 8001ecc:	e00c      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ece:	4a13      	ldr	r2, [pc, #76]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed8:	68d2      	ldr	r2, [r2, #12]
 8001eda:	0a12      	lsrs	r2, r2, #8
 8001edc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
      break;
 8001ee6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0e5b      	lsrs	r3, r3, #25
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e001      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f08:	693b      	ldr	r3, [r7, #16]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	00f42400 	.word	0x00f42400
 8001f20:	016e3600 	.word	0x016e3600

08001f24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f28:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000

08001f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f40:	f7ff fff0 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4904      	ldr	r1, [pc, #16]	@ (8001f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08003b08 	.word	0x08003b08

08001f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f6c:	f7ff ffda 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0adb      	lsrs	r3, r3, #11
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4904      	ldr	r1, [pc, #16]	@ (8001f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08003b08 	.word	0x08003b08

08001f94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d10c      	bne.n	8001fd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fb8:	4a17      	ldr	r2, [pc, #92]	@ (8002018 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fc2:	68d2      	ldr	r2, [r2, #12]
 8001fc4:	0a12      	lsrs	r2, r2, #8
 8001fc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	617b      	str	r3, [r7, #20]
    break;
 8001fd0:	e00c      	b.n	8001fec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd2:	4a12      	ldr	r2, [pc, #72]	@ (800201c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4a0e      	ldr	r2, [pc, #56]	@ (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fdc:	68d2      	ldr	r2, [r2, #12]
 8001fde:	0a12      	lsrs	r2, r2, #8
 8001fe0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    break;
 8001fea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0e5b      	lsrs	r3, r3, #25
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002006:	687b      	ldr	r3, [r7, #4]
}
 8002008:	4618      	mov	r0, r3
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000
 8002018:	016e3600 	.word	0x016e3600
 800201c:	00f42400 	.word	0x00f42400

08002020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002028:	2300      	movs	r3, #0
 800202a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800202c:	2300      	movs	r3, #0
 800202e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8098 	beq.w	800216e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10d      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	4a3f      	ldr	r2, [pc, #252]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002058:	6593      	str	r3, [r2, #88]	@ 0x58
 800205a:	4b3d      	ldr	r3, [pc, #244]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002066:	2301      	movs	r3, #1
 8002068:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800206a:	4b3a      	ldr	r3, [pc, #232]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a39      	ldr	r2, [pc, #228]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002074:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002076:	f7fe fe7b 	bl	8000d70 <HAL_GetTick>
 800207a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800207c:	e009      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7fe fe77 	bl	8000d70 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d902      	bls.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	74fb      	strb	r3, [r7, #19]
        break;
 8002090:	e005      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002092:	4b30      	ldr	r3, [pc, #192]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ef      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800209e:	7cfb      	ldrb	r3, [r7, #19]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d159      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01e      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d019      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020c0:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020cc:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020ec:	4a18      	ldr	r2, [pc, #96]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d016      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe fe37 	bl	8000d70 <HAL_GetTick>
 8002102:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002104:	e00b      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7fe fe33 	bl	8000d70 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d902      	bls.n	800211e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	74fb      	strb	r3, [r7, #19]
            break;
 800211c:	e006      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211e:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ec      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002138:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	4903      	ldr	r1, [pc, #12]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002148:	e008      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	74bb      	strb	r3, [r7, #18]
 800214e:	e005      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800215c:	7c7b      	ldrb	r3, [r7, #17]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d105      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002162:	4ba6      	ldr	r3, [pc, #664]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	4aa5      	ldr	r2, [pc, #660]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800216c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217a:	4ba0      	ldr	r3, [pc, #640]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002180:	f023 0203 	bic.w	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	499c      	ldr	r1, [pc, #624]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800219c:	4b97      	ldr	r3, [pc, #604]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f023 020c 	bic.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	4994      	ldr	r1, [pc, #592]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021be:	4b8f      	ldr	r3, [pc, #572]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	498b      	ldr	r1, [pc, #556]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021e0:	4b86      	ldr	r3, [pc, #536]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	4983      	ldr	r1, [pc, #524]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002202:	4b7e      	ldr	r3, [pc, #504]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002208:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	497a      	ldr	r1, [pc, #488]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002224:	4b75      	ldr	r3, [pc, #468]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4972      	ldr	r1, [pc, #456]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002246:	4b6d      	ldr	r3, [pc, #436]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	4969      	ldr	r1, [pc, #420]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002268:	4b64      	ldr	r3, [pc, #400]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4961      	ldr	r1, [pc, #388]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800228a:	4b5c      	ldr	r3, [pc, #368]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002290:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	4958      	ldr	r1, [pc, #352]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d015      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022ac:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ba:	4950      	ldr	r1, [pc, #320]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022ca:	d105      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022cc:	4b4b      	ldr	r3, [pc, #300]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a4a      	ldr	r2, [pc, #296]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022e4:	4b45      	ldr	r3, [pc, #276]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	4942      	ldr	r1, [pc, #264]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002302:	d105      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002304:	4b3d      	ldr	r3, [pc, #244]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a3c      	ldr	r2, [pc, #240]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800230e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d015      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800231c:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	4934      	ldr	r1, [pc, #208]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800233a:	d105      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233c:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a2e      	ldr	r2, [pc, #184]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002346:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002354:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002362:	4926      	ldr	r1, [pc, #152]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002372:	d105      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002374:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a20      	ldr	r2, [pc, #128]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800237e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239a:	4918      	ldr	r1, [pc, #96]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023aa:	d105      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a12      	ldr	r2, [pc, #72]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023c4:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d2:	490a      	ldr	r1, [pc, #40]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023e2:	d105      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e042      	b.n	8002498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe fb29 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2224      	movs	r2, #36	@ 0x24
 800242e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 ff8e 	bl	800336c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fcbf 	bl	8002dd4 <UART_SetConfig>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e01b      	b.n	8002498 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800246e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800247e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f001 f80d 	bl	80034b0 <UART_CheckIdleState>
 8002496:	4603      	mov	r3, r0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d17b      	bne.n	80025b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_UART_Transmit+0x26>
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e074      	b.n	80025b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2221      	movs	r2, #33	@ 0x21
 80024d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024da:	f7fe fc49 	bl	8000d70 <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	88fa      	ldrh	r2, [r7, #6]
 80024ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024f8:	d108      	bne.n	800250c <HAL_UART_Transmit+0x6c>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	e003      	b.n	8002514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002514:	e030      	b.n	8002578 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	2180      	movs	r1, #128	@ 0x80
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f001 f86f 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e03d      	b.n	80025b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	3302      	adds	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	e007      	b.n	8002566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1c8      	bne.n	8002516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2200      	movs	r2, #0
 800258c:	2140      	movs	r1, #64	@ 0x40
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f001 f838 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e006      	b.n	80025b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	@ 0x28
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	f040 80b5 	bne.w	8002742 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_UART_Receive+0x28>
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0ad      	b.n	8002744 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2222      	movs	r2, #34	@ 0x22
 80025f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fbb7 	bl	8000d70 <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	88fa      	ldrh	r2, [r7, #6]
 8002610:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800261c:	d10e      	bne.n	800263c <HAL_UART_Receive+0x80>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_UART_Receive+0x76>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800262c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002630:	e02d      	b.n	800268e <HAL_UART_Receive+0xd2>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	22ff      	movs	r2, #255	@ 0xff
 8002636:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800263a:	e028      	b.n	800268e <HAL_UART_Receive+0xd2>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10d      	bne.n	8002660 <HAL_UART_Receive+0xa4>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d104      	bne.n	8002656 <HAL_UART_Receive+0x9a>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	22ff      	movs	r2, #255	@ 0xff
 8002650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002654:	e01b      	b.n	800268e <HAL_UART_Receive+0xd2>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	227f      	movs	r2, #127	@ 0x7f
 800265a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800265e:	e016      	b.n	800268e <HAL_UART_Receive+0xd2>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002668:	d10d      	bne.n	8002686 <HAL_UART_Receive+0xca>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <HAL_UART_Receive+0xc0>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	227f      	movs	r2, #127	@ 0x7f
 8002676:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800267a:	e008      	b.n	800268e <HAL_UART_Receive+0xd2>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	223f      	movs	r2, #63	@ 0x3f
 8002680:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002684:	e003      	b.n	800268e <HAL_UART_Receive+0xd2>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002694:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800269e:	d108      	bne.n	80026b2 <HAL_UART_Receive+0xf6>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	e003      	b.n	80026ba <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80026ba:	e036      	b.n	800272a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2200      	movs	r2, #0
 80026c4:	2120      	movs	r1, #32
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 ff9c 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e032      	b.n	8002744 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10c      	bne.n	80026fe <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	8a7b      	ldrh	r3, [r7, #18]
 80026ee:	4013      	ands	r3, r2
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	3302      	adds	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	e00c      	b.n	8002718 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	b2da      	uxtb	r2, r3
 8002706:	8a7b      	ldrh	r3, [r7, #18]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	4013      	ands	r3, r2
 800270c:	b2da      	uxtb	r2, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1c2      	bne.n	80026bc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b0ba      	sub	sp, #232	@ 0xe8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002772:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002776:	f640 030f 	movw	r3, #2063	@ 0x80f
 800277a:	4013      	ands	r3, r2
 800277c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11b      	bne.n	80027c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b00      	cmp	r3, #0
 8002792:	d015      	beq.n	80027c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 82e3 	beq.w	8002d7c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
      }
      return;
 80027be:	e2dd      	b.n	8002d7c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8123 	beq.w	8002a10 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80027ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002a04 <HAL_UART_IRQHandler+0x2b8>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80027da:	4b8b      	ldr	r3, [pc, #556]	@ (8002a08 <HAL_UART_IRQHandler+0x2bc>)
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8116 	beq.w	8002a10 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d011      	beq.n	8002814 <HAL_UART_IRQHandler+0xc8>
 80027f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d011      	beq.n	8002844 <HAL_UART_IRQHandler+0xf8>
 8002820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2202      	movs	r2, #2
 8002832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283a:	f043 0204 	orr.w	r2, r3, #4
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d011      	beq.n	8002874 <HAL_UART_IRQHandler+0x128>
 8002850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2204      	movs	r2, #4
 8002862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	f043 0202 	orr.w	r2, r3, #2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d017      	beq.n	80028b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800288c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002890:	4b5c      	ldr	r3, [pc, #368]	@ (8002a04 <HAL_UART_IRQHandler+0x2b8>)
 8002892:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2208      	movs	r2, #8
 800289e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	f043 0208 	orr.w	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <HAL_UART_IRQHandler+0x196>
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8249 	beq.w	8002d80 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d013      	beq.n	8002922 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800290a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002928:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002936:	2b40      	cmp	r3, #64	@ 0x40
 8002938:	d005      	beq.n	8002946 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800293a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800293e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	d054      	beq.n	80029f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fec9 	bl	80036de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002956:	2b40      	cmp	r3, #64	@ 0x40
 8002958:	d146      	bne.n	80029e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3308      	adds	r3, #8
 8002960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002970:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3308      	adds	r3, #8
 8002982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002986:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800298a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002996:	e841 2300 	strex	r3, r2, [r1]
 800299a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800299e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1d9      	bne.n	800295a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d017      	beq.n	80029e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029b6:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <HAL_UART_IRQHandler+0x2c0>)
 80029b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fb49 	bl	8001058 <HAL_DMA_Abort_IT>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d019      	beq.n	8002a00 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80029da:	4610      	mov	r0, r2
 80029dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029de:	e00f      	b.n	8002a00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f9e1 	bl	8002da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e6:	e00b      	b.n	8002a00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f9dd 	bl	8002da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ee:	e007      	b.n	8002a00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f9d9 	bl	8002da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80029fe:	e1bf      	b.n	8002d80 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a00:	bf00      	nop
    return;
 8002a02:	e1bd      	b.n	8002d80 <HAL_UART_IRQHandler+0x634>
 8002a04:	10000001 	.word	0x10000001
 8002a08:	04000120 	.word	0x04000120
 8002a0c:	080037ab 	.word	0x080037ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	f040 8153 	bne.w	8002cc0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 814c 	beq.w	8002cc0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8145 	beq.w	8002cc0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a48:	2b40      	cmp	r3, #64	@ 0x40
 8002a4a:	f040 80bb 	bne.w	8002bc4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 818f 	beq.w	8002d84 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002a6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f080 8187 	bcs.w	8002d84 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 8087 	bne.w	8002ba2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ac2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ace:	e841 2300 	strex	r3, r2, [r1]
 8002ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1da      	bne.n	8002a94 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3308      	adds	r3, #8
 8002afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e1      	bne.n	8002ade <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e3      	bne.n	8002b1a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b70:	f023 0310 	bic.w	r3, r3, #16
 8002b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e4      	bne.n	8002b60 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fa02 	bl	8000fa6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8fd 	bl	8002dbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bc2:	e0df      	b.n	8002d84 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80d1 	beq.w	8002d88 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80cc 	beq.w	8002d88 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c14:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c1a:	e841 2300 	strex	r3, r2, [r1]
 8002c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e4      	bne.n	8002bf0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	623b      	str	r3, [r7, #32]
   return(result);
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3308      	adds	r3, #8
 8002c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e1      	bne.n	8002c26 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0310 	bic.w	r3, r3, #16
 8002c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	69b9      	ldr	r1, [r7, #24]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e4      	bne.n	8002c76 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f87f 	bl	8002dbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cbe:	e063      	b.n	8002d88 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <HAL_UART_IRQHandler+0x59e>
 8002ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ce0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fda2 	bl	800382c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ce8:	e051      	b.n	8002d8e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d014      	beq.n	8002d20 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d105      	bne.n	8002d0e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d03a      	beq.n	8002d8c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
    }
    return;
 8002d1e:	e035      	b.n	8002d8c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_UART_IRQHandler+0x5f4>
 8002d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fd4c 	bl	80037d6 <UART_EndTransmit_IT>
    return;
 8002d3e:	e026      	b.n	8002d8e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <HAL_UART_IRQHandler+0x614>
 8002d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fd7b 	bl	8003854 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d5e:	e016      	b.n	8002d8e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_UART_IRQHandler+0x642>
 8002d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da0c      	bge.n	8002d8e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fd63 	bl	8003840 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d7a:	e008      	b.n	8002d8e <HAL_UART_IRQHandler+0x642>
      return;
 8002d7c:	bf00      	nop
 8002d7e:	e006      	b.n	8002d8e <HAL_UART_IRQHandler+0x642>
    return;
 8002d80:	bf00      	nop
 8002d82:	e004      	b.n	8002d8e <HAL_UART_IRQHandler+0x642>
      return;
 8002d84:	bf00      	nop
 8002d86:	e002      	b.n	8002d8e <HAL_UART_IRQHandler+0x642>
      return;
 8002d88:	bf00      	nop
 8002d8a:	e000      	b.n	8002d8e <HAL_UART_IRQHandler+0x642>
    return;
 8002d8c:	bf00      	nop
  }
}
 8002d8e:	37e8      	adds	r7, #232	@ 0xe8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b08c      	sub	sp, #48	@ 0x30
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4bab      	ldr	r3, [pc, #684]	@ (80030b0 <UART_SetConfig+0x2dc>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4aa0      	ldr	r2, [pc, #640]	@ (80030b4 <UART_SetConfig+0x2e0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002e4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	f023 010f 	bic.w	r1, r3, #15
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a91      	ldr	r2, [pc, #580]	@ (80030b8 <UART_SetConfig+0x2e4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d125      	bne.n	8002ec4 <UART_SetConfig+0xf0>
 8002e78:	4b90      	ldr	r3, [pc, #576]	@ (80030bc <UART_SetConfig+0x2e8>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d81a      	bhi.n	8002ebc <UART_SetConfig+0xe8>
 8002e86:	a201      	add	r2, pc, #4	@ (adr r2, 8002e8c <UART_SetConfig+0xb8>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002ead 	.word	0x08002ead
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eb5 	.word	0x08002eb5
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ea2:	e0d6      	b.n	8003052 <UART_SetConfig+0x27e>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eaa:	e0d2      	b.n	8003052 <UART_SetConfig+0x27e>
 8002eac:	2304      	movs	r3, #4
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb2:	e0ce      	b.n	8003052 <UART_SetConfig+0x27e>
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eba:	e0ca      	b.n	8003052 <UART_SetConfig+0x27e>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec2:	e0c6      	b.n	8003052 <UART_SetConfig+0x27e>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a7d      	ldr	r2, [pc, #500]	@ (80030c0 <UART_SetConfig+0x2ec>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d138      	bne.n	8002f40 <UART_SetConfig+0x16c>
 8002ece:	4b7b      	ldr	r3, [pc, #492]	@ (80030bc <UART_SetConfig+0x2e8>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	d82d      	bhi.n	8002f38 <UART_SetConfig+0x164>
 8002edc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee4 <UART_SetConfig+0x110>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	08002f39 	.word	0x08002f39
 8002eec:	08002f39 	.word	0x08002f39
 8002ef0:	08002f39 	.word	0x08002f39
 8002ef4:	08002f29 	.word	0x08002f29
 8002ef8:	08002f39 	.word	0x08002f39
 8002efc:	08002f39 	.word	0x08002f39
 8002f00:	08002f39 	.word	0x08002f39
 8002f04:	08002f21 	.word	0x08002f21
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f39 	.word	0x08002f39
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f31 	.word	0x08002f31
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1e:	e098      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f20:	2302      	movs	r3, #2
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f26:	e094      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2e:	e090      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f30:	2308      	movs	r3, #8
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f36:	e08c      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3e:	e088      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5f      	ldr	r2, [pc, #380]	@ (80030c4 <UART_SetConfig+0x2f0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d125      	bne.n	8002f96 <UART_SetConfig+0x1c2>
 8002f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80030bc <UART_SetConfig+0x2e8>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f54:	2b30      	cmp	r3, #48	@ 0x30
 8002f56:	d016      	beq.n	8002f86 <UART_SetConfig+0x1b2>
 8002f58:	2b30      	cmp	r3, #48	@ 0x30
 8002f5a:	d818      	bhi.n	8002f8e <UART_SetConfig+0x1ba>
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d00a      	beq.n	8002f76 <UART_SetConfig+0x1a2>
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d814      	bhi.n	8002f8e <UART_SetConfig+0x1ba>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <UART_SetConfig+0x19a>
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d008      	beq.n	8002f7e <UART_SetConfig+0x1aa>
 8002f6c:	e00f      	b.n	8002f8e <UART_SetConfig+0x1ba>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f74:	e06d      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7c:	e069      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f84:	e065      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f86:	2308      	movs	r3, #8
 8002f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8c:	e061      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f8e:	2310      	movs	r3, #16
 8002f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f94:	e05d      	b.n	8003052 <UART_SetConfig+0x27e>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a4b      	ldr	r2, [pc, #300]	@ (80030c8 <UART_SetConfig+0x2f4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d125      	bne.n	8002fec <UART_SetConfig+0x218>
 8002fa0:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <UART_SetConfig+0x2e8>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fac:	d016      	beq.n	8002fdc <UART_SetConfig+0x208>
 8002fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fb0:	d818      	bhi.n	8002fe4 <UART_SetConfig+0x210>
 8002fb2:	2b80      	cmp	r3, #128	@ 0x80
 8002fb4:	d00a      	beq.n	8002fcc <UART_SetConfig+0x1f8>
 8002fb6:	2b80      	cmp	r3, #128	@ 0x80
 8002fb8:	d814      	bhi.n	8002fe4 <UART_SetConfig+0x210>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <UART_SetConfig+0x1f0>
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	d008      	beq.n	8002fd4 <UART_SetConfig+0x200>
 8002fc2:	e00f      	b.n	8002fe4 <UART_SetConfig+0x210>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fca:	e042      	b.n	8003052 <UART_SetConfig+0x27e>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fd2:	e03e      	b.n	8003052 <UART_SetConfig+0x27e>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fda:	e03a      	b.n	8003052 <UART_SetConfig+0x27e>
 8002fdc:	2308      	movs	r3, #8
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fe2:	e036      	b.n	8003052 <UART_SetConfig+0x27e>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fea:	e032      	b.n	8003052 <UART_SetConfig+0x27e>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a30      	ldr	r2, [pc, #192]	@ (80030b4 <UART_SetConfig+0x2e0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d12a      	bne.n	800304c <UART_SetConfig+0x278>
 8002ff6:	4b31      	ldr	r3, [pc, #196]	@ (80030bc <UART_SetConfig+0x2e8>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003000:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003004:	d01a      	beq.n	800303c <UART_SetConfig+0x268>
 8003006:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800300a:	d81b      	bhi.n	8003044 <UART_SetConfig+0x270>
 800300c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003010:	d00c      	beq.n	800302c <UART_SetConfig+0x258>
 8003012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003016:	d815      	bhi.n	8003044 <UART_SetConfig+0x270>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <UART_SetConfig+0x250>
 800301c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003020:	d008      	beq.n	8003034 <UART_SetConfig+0x260>
 8003022:	e00f      	b.n	8003044 <UART_SetConfig+0x270>
 8003024:	2300      	movs	r3, #0
 8003026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800302a:	e012      	b.n	8003052 <UART_SetConfig+0x27e>
 800302c:	2302      	movs	r3, #2
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003032:	e00e      	b.n	8003052 <UART_SetConfig+0x27e>
 8003034:	2304      	movs	r3, #4
 8003036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800303a:	e00a      	b.n	8003052 <UART_SetConfig+0x27e>
 800303c:	2308      	movs	r3, #8
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003042:	e006      	b.n	8003052 <UART_SetConfig+0x27e>
 8003044:	2310      	movs	r3, #16
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800304a:	e002      	b.n	8003052 <UART_SetConfig+0x27e>
 800304c:	2310      	movs	r3, #16
 800304e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a17      	ldr	r2, [pc, #92]	@ (80030b4 <UART_SetConfig+0x2e0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	f040 80a8 	bne.w	80031ae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800305e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003062:	2b08      	cmp	r3, #8
 8003064:	d834      	bhi.n	80030d0 <UART_SetConfig+0x2fc>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <UART_SetConfig+0x298>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	08003091 	.word	0x08003091
 8003070:	080030d1 	.word	0x080030d1
 8003074:	08003099 	.word	0x08003099
 8003078:	080030d1 	.word	0x080030d1
 800307c:	0800309f 	.word	0x0800309f
 8003080:	080030d1 	.word	0x080030d1
 8003084:	080030d1 	.word	0x080030d1
 8003088:	080030d1 	.word	0x080030d1
 800308c:	080030a7 	.word	0x080030a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003090:	f7fe ff54 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8003094:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003096:	e021      	b.n	80030dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <UART_SetConfig+0x2f8>)
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800309c:	e01e      	b.n	80030dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309e:	f7fe fedf 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 80030a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030a4:	e01a      	b.n	80030dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030ac:	e016      	b.n	80030dc <UART_SetConfig+0x308>
 80030ae:	bf00      	nop
 80030b0:	cfff69f3 	.word	0xcfff69f3
 80030b4:	40008000 	.word	0x40008000
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40004400 	.word	0x40004400
 80030c4:	40004800 	.word	0x40004800
 80030c8:	40004c00 	.word	0x40004c00
 80030cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 812a 	beq.w	8003338 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	4a9e      	ldr	r2, [pc, #632]	@ (8003364 <UART_SetConfig+0x590>)
 80030ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ee:	461a      	mov	r2, r3
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	429a      	cmp	r2, r3
 8003106:	d305      	bcc.n	8003114 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	429a      	cmp	r2, r3
 8003112:	d903      	bls.n	800311c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800311a:	e10d      	b.n	8003338 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	2200      	movs	r2, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	60fa      	str	r2, [r7, #12]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	4a8e      	ldr	r2, [pc, #568]	@ (8003364 <UART_SetConfig+0x590>)
 800312a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800312e:	b29b      	uxth	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800313a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800313e:	f7fd f86b 	bl	8000218 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	020b      	lsls	r3, r1, #8
 8003154:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003158:	0202      	lsls	r2, r0, #8
 800315a:	6979      	ldr	r1, [r7, #20]
 800315c:	6849      	ldr	r1, [r1, #4]
 800315e:	0849      	lsrs	r1, r1, #1
 8003160:	2000      	movs	r0, #0
 8003162:	460c      	mov	r4, r1
 8003164:	4605      	mov	r5, r0
 8003166:	eb12 0804 	adds.w	r8, r2, r4
 800316a:	eb43 0905 	adc.w	r9, r3, r5
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	469a      	mov	sl, r3
 8003176:	4693      	mov	fp, r2
 8003178:	4652      	mov	r2, sl
 800317a:	465b      	mov	r3, fp
 800317c:	4640      	mov	r0, r8
 800317e:	4649      	mov	r1, r9
 8003180:	f7fd f84a 	bl	8000218 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003192:	d308      	bcc.n	80031a6 <UART_SetConfig+0x3d2>
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800319a:	d204      	bcs.n	80031a6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	e0c8      	b.n	8003338 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031ac:	e0c4      	b.n	8003338 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031b6:	d167      	bne.n	8003288 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80031b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d828      	bhi.n	8003212 <UART_SetConfig+0x43e>
 80031c0:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <UART_SetConfig+0x3f4>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031ed 	.word	0x080031ed
 80031cc:	080031f5 	.word	0x080031f5
 80031d0:	080031fd 	.word	0x080031fd
 80031d4:	08003213 	.word	0x08003213
 80031d8:	08003203 	.word	0x08003203
 80031dc:	08003213 	.word	0x08003213
 80031e0:	08003213 	.word	0x08003213
 80031e4:	08003213 	.word	0x08003213
 80031e8:	0800320b 	.word	0x0800320b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ec:	f7fe fea6 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 80031f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031f2:	e014      	b.n	800321e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031f4:	f7fe feb8 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 80031f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031fa:	e010      	b.n	800321e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003368 <UART_SetConfig+0x594>)
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003200:	e00d      	b.n	800321e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003202:	f7fe fe2d 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8003206:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003208:	e009      	b.n	800321e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800320a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003210:	e005      	b.n	800321e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800321c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8089 	beq.w	8003338 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	4a4e      	ldr	r2, [pc, #312]	@ (8003364 <UART_SetConfig+0x590>)
 800322c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003230:	461a      	mov	r2, r3
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	fbb3 f3f2 	udiv	r3, r3, r2
 8003238:	005a      	lsls	r2, r3, #1
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	441a      	add	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	2b0f      	cmp	r3, #15
 8003250:	d916      	bls.n	8003280 <UART_SetConfig+0x4ac>
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003258:	d212      	bcs.n	8003280 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	b29b      	uxth	r3, r3
 800325e:	f023 030f 	bic.w	r3, r3, #15
 8003262:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	b29b      	uxth	r3, r3
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	b29a      	uxth	r2, r3
 8003270:	8bfb      	ldrh	r3, [r7, #30]
 8003272:	4313      	orrs	r3, r2
 8003274:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	8bfa      	ldrh	r2, [r7, #30]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e05b      	b.n	8003338 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003286:	e057      	b.n	8003338 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003288:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800328c:	2b08      	cmp	r3, #8
 800328e:	d828      	bhi.n	80032e2 <UART_SetConfig+0x50e>
 8003290:	a201      	add	r2, pc, #4	@ (adr r2, 8003298 <UART_SetConfig+0x4c4>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032bd 	.word	0x080032bd
 800329c:	080032c5 	.word	0x080032c5
 80032a0:	080032cd 	.word	0x080032cd
 80032a4:	080032e3 	.word	0x080032e3
 80032a8:	080032d3 	.word	0x080032d3
 80032ac:	080032e3 	.word	0x080032e3
 80032b0:	080032e3 	.word	0x080032e3
 80032b4:	080032e3 	.word	0x080032e3
 80032b8:	080032db 	.word	0x080032db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032bc:	f7fe fe3e 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 80032c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032c2:	e014      	b.n	80032ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c4:	f7fe fe50 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 80032c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032ca:	e010      	b.n	80032ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032cc:	4b26      	ldr	r3, [pc, #152]	@ (8003368 <UART_SetConfig+0x594>)
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032d0:	e00d      	b.n	80032ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d2:	f7fe fdc5 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 80032d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032d8:	e009      	b.n	80032ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032e0:	e005      	b.n	80032ee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032ec:	bf00      	nop
    }

    if (pclk != 0U)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d021      	beq.n	8003338 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003364 <UART_SetConfig+0x590>)
 80032fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032fe:	461a      	mov	r2, r3
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	fbb3 f2f2 	udiv	r2, r3, r2
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	441a      	add	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b0f      	cmp	r3, #15
 800331c:	d909      	bls.n	8003332 <UART_SetConfig+0x55e>
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003324:	d205      	bcs.n	8003332 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	b29a      	uxth	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60da      	str	r2, [r3, #12]
 8003330:	e002      	b.n	8003338 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2201      	movs	r2, #1
 800333c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2201      	movs	r2, #1
 8003344:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2200      	movs	r2, #0
 800334c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2200      	movs	r2, #0
 8003352:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003354:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003358:	4618      	mov	r0, r3
 800335a:	3730      	adds	r7, #48	@ 0x30
 800335c:	46bd      	mov	sp, r7
 800335e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003362:	bf00      	nop
 8003364:	08003b10 	.word	0x08003b10
 8003368:	00f42400 	.word	0x00f42400

0800336c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01a      	beq.n	8003482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800346a:	d10a      	bne.n	8003482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
  }
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b098      	sub	sp, #96	@ 0x60
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034c0:	f7fd fc56 	bl	8000d70 <HAL_GetTick>
 80034c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d12f      	bne.n	8003534 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f88e 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d022      	beq.n	8003534 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003502:	653b      	str	r3, [r7, #80]	@ 0x50
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800350c:	647b      	str	r3, [r7, #68]	@ 0x44
 800350e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800351a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e6      	bne.n	80034ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e063      	b.n	80035fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d149      	bne.n	80035d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003542:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354a:	2200      	movs	r2, #0
 800354c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f857 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d03c      	beq.n	80035d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	623b      	str	r3, [r7, #32]
   return(result);
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30
 800357c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e6      	bne.n	800355c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3308      	adds	r3, #8
 8003594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	60fb      	str	r3, [r7, #12]
   return(result);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3308      	adds	r3, #8
 80035ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ae:	61fa      	str	r2, [r7, #28]
 80035b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	69b9      	ldr	r1, [r7, #24]
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	617b      	str	r3, [r7, #20]
   return(result);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e012      	b.n	80035fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3758      	adds	r7, #88	@ 0x58
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003614:	e04f      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800361c:	d04b      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fd fba7 	bl	8000d70 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <UART_WaitOnFlagUntilTimeout+0x30>
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e04e      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d037      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b80      	cmp	r3, #128	@ 0x80
 800364a:	d034      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b40      	cmp	r3, #64	@ 0x40
 8003650:	d031      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d110      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2208      	movs	r2, #8
 8003666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f838 	bl	80036de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2208      	movs	r2, #8
 8003672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e029      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800368c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003690:	d111      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800369a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f81e 	bl	80036de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e00f      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d0a0      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036de:	b480      	push	{r7}
 80036e0:	b095      	sub	sp, #84	@ 0x54
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003704:	643b      	str	r3, [r7, #64]	@ 0x40
 8003706:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800370a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e6      	bne.n	80036e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	61fb      	str	r3, [r7, #28]
   return(result);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3308      	adds	r3, #8
 800373a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800373c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800373e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e3      	bne.n	8003718 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d118      	bne.n	800378a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	60bb      	str	r3, [r7, #8]
   return(result);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f023 0310 	bic.w	r3, r3, #16
 800376c:	647b      	str	r3, [r7, #68]	@ 0x44
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6979      	ldr	r1, [r7, #20]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	613b      	str	r3, [r7, #16]
   return(result);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e6      	bne.n	8003758 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800379e:	bf00      	nop
 80037a0:	3754      	adds	r7, #84	@ 0x54
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff faed 	bl	8002da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b088      	sub	sp, #32
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6979      	ldr	r1, [r7, #20]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	613b      	str	r3, [r7, #16]
   return(result);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e6      	bne.n	80037de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff fab8 	bl	8002d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003824:	bf00      	nop
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_UARTEx_DisableFifoMode+0x16>
 800387a:	2302      	movs	r3, #2
 800387c:	e027      	b.n	80038ce <HAL_UARTEx_DisableFifoMode+0x66>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2224      	movs	r2, #36	@ 0x24
 800388a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80038ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e02d      	b.n	800394e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2224      	movs	r2, #36	@ 0x24
 80038fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f850 	bl	80039d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800396a:	2302      	movs	r3, #2
 800396c:	e02d      	b.n	80039ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2224      	movs	r2, #36	@ 0x24
 800397a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f812 	bl	80039d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d108      	bne.n	80039f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039f4:	e031      	b.n	8003a5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039f6:	2308      	movs	r3, #8
 80039f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039fa:	2308      	movs	r3, #8
 80039fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	0e5b      	lsrs	r3, r3, #25
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	0f5b      	lsrs	r3, r3, #29
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a1e:	7bbb      	ldrb	r3, [r7, #14]
 8003a20:	7b3a      	ldrb	r2, [r7, #12]
 8003a22:	4911      	ldr	r1, [pc, #68]	@ (8003a68 <UARTEx_SetNbDataToProcess+0x94>)
 8003a24:	5c8a      	ldrb	r2, [r1, r2]
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a2a:	7b3a      	ldrb	r2, [r7, #12]
 8003a2c:	490f      	ldr	r1, [pc, #60]	@ (8003a6c <UARTEx_SetNbDataToProcess+0x98>)
 8003a2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	7b7a      	ldrb	r2, [r7, #13]
 8003a40:	4909      	ldr	r1, [pc, #36]	@ (8003a68 <UARTEx_SetNbDataToProcess+0x94>)
 8003a42:	5c8a      	ldrb	r2, [r1, r2]
 8003a44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a48:	7b7a      	ldrb	r2, [r7, #13]
 8003a4a:	4908      	ldr	r1, [pc, #32]	@ (8003a6c <UARTEx_SetNbDataToProcess+0x98>)
 8003a4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	08003b28 	.word	0x08003b28
 8003a6c:	08003b30 	.word	0x08003b30

08003a70 <memset>:
 8003a70:	4402      	add	r2, r0
 8003a72:	4603      	mov	r3, r0
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d100      	bne.n	8003a7a <memset+0xa>
 8003a78:	4770      	bx	lr
 8003a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7e:	e7f9      	b.n	8003a74 <memset+0x4>

08003a80 <__libc_init_array>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4d0d      	ldr	r5, [pc, #52]	@ (8003ab8 <__libc_init_array+0x38>)
 8003a84:	4c0d      	ldr	r4, [pc, #52]	@ (8003abc <__libc_init_array+0x3c>)
 8003a86:	1b64      	subs	r4, r4, r5
 8003a88:	10a4      	asrs	r4, r4, #2
 8003a8a:	2600      	movs	r6, #0
 8003a8c:	42a6      	cmp	r6, r4
 8003a8e:	d109      	bne.n	8003aa4 <__libc_init_array+0x24>
 8003a90:	4d0b      	ldr	r5, [pc, #44]	@ (8003ac0 <__libc_init_array+0x40>)
 8003a92:	4c0c      	ldr	r4, [pc, #48]	@ (8003ac4 <__libc_init_array+0x44>)
 8003a94:	f000 f818 	bl	8003ac8 <_init>
 8003a98:	1b64      	subs	r4, r4, r5
 8003a9a:	10a4      	asrs	r4, r4, #2
 8003a9c:	2600      	movs	r6, #0
 8003a9e:	42a6      	cmp	r6, r4
 8003aa0:	d105      	bne.n	8003aae <__libc_init_array+0x2e>
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa8:	4798      	blx	r3
 8003aaa:	3601      	adds	r6, #1
 8003aac:	e7ee      	b.n	8003a8c <__libc_init_array+0xc>
 8003aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab2:	4798      	blx	r3
 8003ab4:	3601      	adds	r6, #1
 8003ab6:	e7f2      	b.n	8003a9e <__libc_init_array+0x1e>
 8003ab8:	08003b40 	.word	0x08003b40
 8003abc:	08003b40 	.word	0x08003b40
 8003ac0:	08003b40 	.word	0x08003b40
 8003ac4:	08003b44 	.word	0x08003b44

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
